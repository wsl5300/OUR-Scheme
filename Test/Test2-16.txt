1
; =============== Problem 13 可見數據 ====================
ab
(define a "=============== Problem 13 viewable case =================")
a

(clean-environment)
a

(define operators (list + - * /))
( (car (cdr operators))
  ((car operators) 10 20)
  ((car (cdr (cdr operators))) 11 22)
)

(define listOfNum '(10.1254 20.318503 30.1 40.2 50 60 70 80.999 90.9)
)
(define listOfStr '("What?" "When?" "Where?" "Who?" "How?" "Why?" "How come?") 
)
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
(cons (car listOfSym)
      (cons (car (cdr listOfStr))
            (list (car (cdr (cdr listOfNum))))
      )
)
(cons (car (cdr (cdr listOfNum)))
      (cons (car (cdr listOfStr))
            (list (car listOfSym))
      )
)

(define abc
  (list
    (cons (car listOfSym)
          (cons (car (cdr listOfStr))
                (list (car (cdr (cdr listOfNum))))
          )
    ) ; cons
    (cons (car (cdr (cdr listOfNum)))
          (cons (car (cdr listOfStr))
                (list (car listOfSym))
          )
    ) ; cons
  ) ; list
) ; define
abc
(cons (car (car abc))
      (cdr abc)
)
(cons (car (car (car abc)))
      (cdr abc)
)

(define efg
  (cons (car abc)
        (car (cdr abc))
  )
)
efg
abc
(define ++ (car operators))
(define -- (car (cdr operators)))
( ++ (car listOfNum)
    (car (cdr listOfNum))
    (car (cdr (cdr listOfNum)))
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
     )
     ( if ( string>? (car listOfStr) (car (cdr listOfStr))
          )
         10
         15
     )
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfStr)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           10
           15
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
           (cdr listOfNum)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
(define What? (car listOfNum))
(define When? (car (cdr listOfNum)))
listOfSym
( cons (list (car listOfSym)
               What?
         )
         (cdr listOfSym)
  )
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       What?
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
( cons (car listOfSym)
         ( cons (list (car (cdr listOfSym))
                      When?
                )
                (cdr (cdr listOfSym))
         )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              When?
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       (car listOfNum)
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              (car (cdr listOfNum))
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 6 : Medium, with error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Medium, with error, with comment, with tricks
'(12.5)'(12(. 3))
'(t.nil.(1 2 3))
'(1 2 3 ")") )
'(1 2 3 ")"())
'(1 2 3 ")".())
 '( t
   ()
   .
   ( ( 1.250 
       0.375
     )
     .
     ("#f))")
   )
 )
'(t().((1.25 .375)."#f))"))
'((1 2 3)
   (4 . 5) 
   . 
   (6 (7 . nil) (8 . 9)
   .
   10
   )
  )
'((1 2 3)
   (4 . 5) 
   (6(7.(#f.#f).5)(".5"."nil").()
   )
   .
   #f
  )
'((1 2 3)
   (4 . 5) 
   (6(7.(#f.#f).5).(".5"."nil").()
    
         '     (  
 nil-nil=nil .nil+nil<>nil . nil   
    )  
''( !
      .
      ( %^&
        .
        abc
      )
    )
       '(Hi.there(there.(     
                          )))
       '(Hi.there(there .(()what()
                           )))
'(1 2 3 "To Taiwan". nil)'(.25#f)
";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error, with comment, with tricks
'(1 2 3) 4 '(5 6 . 7) . 8
'(1 2 3) ; this is a comment
. ; error on line 1
'(1 2 3) 4 5 '(;abc
2 .);error on line 2
'(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a))););. a).) ; 'bar' a local function too
                                        ; for any input pair 'a' and 'b',
                                        ; return (+ (* a b) a)
                                        
    (+ (foo (+ x 3))   ; this function 'f' calls 'foo',
       z)              ; adds its return-value with 'z' and then
                       ; return the resulting value
   )) (
        1 . 2 
      )
'(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a)))). a b).) ; 'bar' a local function too
                                        ; for any input pair 'a' and 'b',
                                        ; return (+ (* a b) a)
                                        
    (+ (foo (+ x 3))   ; this function 'f' calls 'foo',
       z)              ; adds its return-value with 'z' and then
                       ; return the resulting value
   )) '(
        1 . 2 
      )
'(((1 . 2) ; 3  4
    3.5
    . ((.875 4.) ; ))
       5
       . 
       ("5 . 6 . 7 ) ".0)
      )
   ) 
   . (7. 8 . nil)
  )

  '(((1 . 2) ; 3  4
    3.5
    . ((.875 4.) ; ))
       5
       . 
       ("5 . 6 . 7 ) ".0)
       (7. 8 . ())
      )
   ) 
   . (7. 8 . ())
  )
'(save-restriction
    ;; vladimir@cs.ualberta.ca 30-Jul-1997: skip ` in
    ;; `variable' so that the value is returned, not the
    ;; name
    (if (and ignore-quotes
             (eq (following-char) ?)
        )
        (forward-char))
    (narrow-to-region (point-min) opoint)
    (setq expr (read (current-buffer)))
    ;; If it's an (interactive ...) form, it's more
    ;; useful to show how an interactive call would
    ;; use it.
    (and (consp expr)
         (eq (car expr) 'interactive)
         (setq expr
         (list 'call-interactively
         (list 'quote
         (list 'lambda
               '(&rest args)
               expr
               'args)))))
    expr)
'(save-restriction
    ;; vladimir@cs.ualberta.ca 30-Jul-1997: skip ` in
    ;; `variable' so that the value is returned, not the
    ;; name
    (if (and ignore-quotes
             (eq (following-char) "?
             )
        )
        (forward-char))
    (narrow-to-region (point-min) opoint)
    (setq expr (read (current-buffer)))
    ;; If it's an (interactive ...) form, it's more
    ;; useful to show how an interactive call would
    ;; use it.
    (and (consp expr)
         (eq (car expr) 'interactive)
         (setq expr
         (list 'call-interactively
         (list 'quote
         (list 'lambda
               '(&rest args)
               expr
               'args)))))
    expr)
'(defun eval-last-sexp-1 (eval-last-sexp-arg-internal)
  "Evaluate sexp before point; print value in minibuffer.\n"
  "With argument, print output into current buffer."
  (let ((standard-output (if eval-last-sexp-arg-internal (current-buffer) t)))
    (eval-last-sexp-print-value (eval (preceding-sexp)))))
'(defun eval-last-sexp-1 (eval-last-sexp-arg-internal)
  "Evaluate sexp before point; print value in minibuffer.\n
  '(let ((standard-output (if eval-last-sexp-arg-internal (current-buffer) t)))
    (eval-last-sexp-print-value (eval (preceding-sexp)))))
'(defun eval-last-sexp-print-value (value)
  (let ((unabbreviated (let ((print-length nil) (print-level nil))
       (prin1-to-string value)))
  (print-length eval-expression-print-length)
  (print-level eval-expression-print-level)
  (beg (point))
  end)
    (prog1
  (prin1 value)
      (let ((str (eval-expression-print-format value)))
  (if str (princ str)))
      (setq end (point))
      (when (and (bufferp standard-output)
     (or (not (null print-length))
         (not (null print-level)))
     (not (string= unabbreviated
             (buffer-substring-no-properties beg end))))
  (last-sexp-setup-props beg end value
             unabbreviated
             (buffer-substring-no-properties beg end))
  ))))  (
    exit   )<<






Welcome to OurScheme!

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 13 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> operators defined

> -212

> listOfNum defined

> listOfStr defined

> listOfSym defined

> ( What?
  "When?"
  30.100
)

> ( 30.100
  "When?"
  What?
)

> abc defined

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ( What?
  ( 30.100
    "When?"
    What?
  )
)

> ERROR (car with incorrect argument type) : What?

> efg defined

> ( ( What?
    "When?"
    30.100
  )
  30.100
  "When?"
  What?
)

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ++ defined

> -- defined

> 60.544

> 45.544

> ERROR (+ with incorrect argument type) : "Where?"

> ERROR (- with incorrect argument type) : What?

> ERROR (incorrect number of arguments) : if

> ERROR (no return value) : ( if
  ( string>?
    ( car
      listOfStr
    )
    ( car
      ( cdr
        listOfStr
      )
    )
  )
  ( car
    listOfStr
  )
)

> ERROR (car with incorrect argument type) : 30.100

> ERROR (car with incorrect argument type) : "It's a plane!"

> ERROR (incorrect number of arguments) : car

> ERROR (incorrect number of arguments) : cdr

> What? defined

> When? defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 6 : Medium, with error"

> ( 12.500
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 6 is >>.<<

> ( t.nil.
  ( 1
    2
    3
  )
)

> ( 1
  2
  3
  ")"
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>)<<

> ( 1
  2
  3
  ")"
  nil
)

> ( 1
  2
  3
  ")"
)

> ( #t
  nil
  ( 1.250
    0.375
  )
  "#f))"
)

> ( #t
  nil
  ( 1.250
    0.375
  )
  .
  "#f))"
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  6
  ( 7
  )
  ( 8
    .
    9
  )
  .
  10
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  ( 6
    ( 7.000
      ( #f.#f
      )
      0.500
    )
    ( ".5"
      .
      "nil"
    )
  )
)

> ERROR (unexpected token) : ')' expected when token at Line 3 Column 32 is >>.<<

> ( nil-nil=nil
  .nil+nil<>nil
)

> ( quote
  ( !
    %^&
    .
    abc
  )
)

> ( Hi.there
  ( there.
    nil
  )
)

> ( Hi.there
  ( there
    nil
    what
    nil
  )
)

> ( 1
  2
  3
  "To Taiwan"
)

> ( .25#f
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error"

> ( 1
  2
  3
)

> 4

> ( 5
  6
  .
  7
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 1
  2
  3
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> ( 1
  2
  3
)

> 4

> 5

> ERROR (unexpected token) : atom or '(' expected when token at Line 2 Column 4 is >>)<<

> ( define
  ( f
    z
  )
  ( let
    ( ( x
        5
      )
    )
    ( define
      foo
      ( lambda
        ( y
        )
        ( bar
          x
          y
        )
      )
    )
    ( define
      bar
      ( lambda
        ( a
          b
        )
        ( +
          ( *
            a
            b
          )
          a
        )
      )
    )
    ( +
      ( foo
        ( +
          x
          3
        )
      )
      z
    )
  )
)

> ERROR (non-list) : ( 1
  .
  2
)

> ERROR (unexpected token) : ')' expected when token at Line 9 Column 51 is >>b<<

> ERROR (unbound symbol) : foo

> ERROR (unexpected token) : atom or '(' expected when token at Line 2 Column 4 is >>)<<

> 1

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 7 is >>)<<

> ( ( ( 1
      .
      2
    )
    3.500
    ( 0.875
      4.000
    )
    5
    "5 . 6 . 7 ) "
    0.000
  )
  7.000
  8
)

> ERROR (unexpected token) : ')' expected when token at Line 8 Column 8 is >>(<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 7 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 3 is >>)<<

> ( save-restriction
  ( if
    ( and
      ignore-quotes
      ( eq
        ( following-char
        )
        ?
      )
    )
    ( forward-char
    )
  )
  ( narrow-to-region
    ( point-min
    )
    opoint
  )
  ( setq
    expr
    ( read
      ( current-buffer
      )
    )
  )
  ( and
    ( consp
      expr
    )
    ( eq
      ( car
        expr
      )
      ( quote
        interactive
      )
    )
    ( setq
      expr
      ( list
        ( quote
          call-interactively
        )
        ( list
          ( quote
            quote
          )
          ( list
            ( quote
              lambda
            )
            ( quote
              ( &rest
                args
              )
            )
            expr
            ( quote
              args
            )
          )
        )
      )
    )
  )
  expr
)

> ERROR (no closing quote) : END-OF-LINE encountered at Line 6 Column 37

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 14 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 9 is >>)<<

> ERROR (unbound symbol) : forward-char

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ERROR (unbound symbol) : narrow-to-region

> ERROR (unbound symbol) : setq

> ERROR (unbound symbol) : consp

> ERROR (unbound symbol) : expr

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( defun
  eval-last-sexp-1
  ( eval-last-sexp-arg-internal
  )
  "Evaluate sexp before point; print value in minibuffer.
"
  "With argument, print output into current buffer."
  ( let
    ( ( standard-output
        ( if
          eval-last-sexp-arg-internal
          ( current-buffer
          )
          #t
        )
      )
    )
    ( eval-last-sexp-print-value
      ( eval
        ( preceding-sexp
        )
      )
    )
  )
)

> ERROR (no closing quote) : END-OF-LINE encountered at Line 2 Column 60

> ( let
  ( ( standard-output
      ( if
        eval-last-sexp-arg-internal
        ( current-buffer
        )
        #t
      )
    )
  )
  ( eval-last-sexp-print-value
    ( eval
      ( preceding-sexp
      )
    )
  )
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( defun
  eval-last-sexp-print-value
  ( value
  )
  ( let
    ( ( unabbreviated
        ( let
          ( ( print-length
              nil
            )
            ( print-level
              nil
            )
          )
          ( prin1-to-string
            value
          )
        )
      )
      ( print-length
        eval-expression-print-length
      )
      ( print-level
        eval-expression-print-level
      )
      ( beg
        ( point
        )
      )
      end
    )
    ( prog1
      ( prin1
        value
      )
      ( let
        ( ( str
            ( eval-expression-print-format
              value
            )
          )
        )
        ( if
          str
          ( princ
            str
          )
        )
      )
      ( setq
        end
        ( point
        )
      )
      ( when
        ( and
          ( bufferp
            standard-output
          )
          ( or
            ( not
              ( null
                print-length
              )
            )
            ( not
              ( null
                print-level
              )
            )
          )
          ( not
            ( string=
              unabbreviated
              ( buffer-substring-no-properties
                beg
                end
              )
            )
          )
        )
        ( last-sexp-setup-props
          beg
          end
          value
          unabbreviated
          ( buffer-substring-no-properties
            beg
            end
          )
        )
      )
    )
  )
)

> 
Thanks for using OurScheme!<<