1  
; =============== Problem 13 可見數據 ====================
ab
(define a "=============== Problem 13 viewable case =================")
a

(clean-environment)
a

(define operators (list + - * /))
( (car (cdr operators))
  ((car operators) 10 20)
  ((car (cdr (cdr operators))) 11 22)
)

(define listOfNum '(10.1254 20.318503 30.1 40.2 50 60 70 80.999 90.9)
)
(define listOfStr '("What?" "When?" "Where?" "Who?" "How?" "Why?" "How come?") 
)
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
(cons (car listOfSym)
      (cons (car (cdr listOfStr))
            (list (car (cdr (cdr listOfNum))))
      )
)
(cons (car (cdr (cdr listOfNum)))
      (cons (car (cdr listOfStr))
            (list (car listOfSym))
      )
)

(define abc
  (list
    (cons (car listOfSym)
          (cons (car (cdr listOfStr))
                (list (car (cdr (cdr listOfNum))))
          )
    ) ; cons
    (cons (car (cdr (cdr listOfNum)))
          (cons (car (cdr listOfStr))
                (list (car listOfSym))
          )
    ) ; cons
  ) ; list
) ; define
abc
(cons (car (car abc))
      (cdr abc)
)
(cons (car (car (car abc)))
      (cdr abc)
)

(define efg
  (cons (car abc)
        (car (cdr abc))
  )
)
efg
abc
(define ++ (car operators))
(define -- (car (cdr operators)))
( ++ (car listOfNum)
    (car (cdr listOfNum))
    (car (cdr (cdr listOfNum)))
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
     )
     ( if ( string>? (car listOfStr) (car (cdr listOfStr))
          )
         10
         15
     )
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfStr)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           10
           15
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
           (cdr listOfNum)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
(define What? (car listOfNum))
(define When? (car (cdr listOfNum)))
listOfSym
( cons (list (car listOfSym)
               What?
         )
         (cdr listOfSym)
  )
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       What?
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
( cons (car listOfSym)
         ( cons (list (car (cdr listOfSym))
                      When?
                )
                (cdr (cdr listOfSym))
         )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              When?
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       (car listOfNum)
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              (car (cdr listOfNum))
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
<<




Welcome to OurScheme!

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 13 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> operators defined

> -212

> listOfNum defined

> listOfStr defined

> listOfSym defined

> ( What?
  "When?"
  30.100
)

> ( 30.100
  "When?"
  What?
)

> abc defined

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ( What?
  ( 30.100
    "When?"
    What?
  )
)

> ERROR (car with incorrect argument type) : What?

> efg defined

> ( ( What?
    "When?"
    30.100
  )
  30.100
  "When?"
  What?
)

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ++ defined

> -- defined

> 60.544

> 45.544

> ERROR (+ with incorrect argument type) : "Where?"

> ERROR (- with incorrect argument type) : What?

> ERROR (incorrect number of arguments) : if

> ERROR (no return value) : ( if
  ( string>?
    ( car
      listOfStr
    )
    ( car
      ( cdr
        listOfStr
      )
    )
  )
  ( car
    listOfStr
  )
)

> ERROR (car with incorrect argument type) : 30.100

> ERROR (car with incorrect argument type) : "It's a plane!"

> ERROR (incorrect number of arguments) : car

> ERROR (incorrect number of arguments) : cdr

> What? defined

> When? defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!<<